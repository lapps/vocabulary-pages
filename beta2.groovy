/*
 * This template expects three parameters to be passed to it:
 *
 * 1. element : the ElementDelegate for the page being generated.
 * 2. elements: a HashMap used to map element names to their ElementDelegate object.
 * 3. parents: the names all parents of this element.
 */
def vocab = { name ->
	builder.td {
		a(href:'#', "http://vocab.lappsgrid.org/${name}")
	}
}

html {
    head {
        title element.name
        link rel:'stylesheet', type:'text/css', href:'lappsstyle.css'
    }
    body {
        div(id:'container') {
            div(id:'intro') {
                div(id:'pageHeader') {
                    h1 "LAPPS Web Service Exchange Vocabulary"
                }
            }
            div(id:'mainContent') {
                div(id:'sectionbar') {
                    p {
                        a(href:'index.html', 'Home')
                    }
                }
                p(class:'head') {
                    parents.each { parent ->
                        a(href:"${parent.name}.html", parent.name)
                        span ' > '
                    }
                    span element.name
                }
                br()
                table {
                    tr {
                        td(class:'definition') { b 'Definition' }
                        td element.definition
                    }
                    if (element.sameAs.size() > 0) {
                        tr {
                            td { b "Same as" }
                            td {
                                element.sameAs.collect { a(href:it, it) }.join(", ")
                            }
                        }
                    }
                    if (element.similarTo.size() > 0) {
                        tr {
                            td { b "Similar to" }
                            td {
                                element.similarTo.collect { a(href:it, it) }.join(", ")
                            }
                        }
                    }
                    tr {
                        td { b "URI" }
                        //td element.uri
                        vocab element.name
                    }
                }

                def node = element
                h2 'Metadata'
				table(class:'definition-table') {
					tr {
						th class:'col1', "Properties"
						th class:'fixed', "Type"
						th "Description"
					}
					while (node) {
						node.metadata.each { name,property ->
							tr {
								if (node.name == element.name) {
									td name
								}
								else {
									td {
										mkp.yieldUnescaped "${name} : <a href='${node.name}.html'>${node.name}</a>"
									}
								}
								td property.type
								td {
									mkp.yieldUnescaped property.description
								}
							}
						}
						node = elements[node.parent]
					}
				}
                /* h1 "Properties" */
                node = element
                h2 'Properties'
				table(class:'definition-table') {
					tr {
						th class:'col1', "Properties"
						th class:'fixed', "Type"
						th "Description"
					}
					
					while (node) {
						node.properties.each { name,property ->
							tr {
								if (node.name == element.name) {
									td name
								}
								else {
									td {
										mkp.yieldUnescaped "${name} : <a href='${node.name}.html'>${node.name}</a>"
									}
								}
								td property.type
								td {
									mkp.yieldUnescaped property.description
								}
							}
						}
						node = elements[node.parent]
					}
				}
                br()
                div(class:'index') {
                    span "Back to the "
                    a(href:'index.html', 'index')
                }
            }
        }
        def year = Calendar.getInstance().get(Calendar.YEAR)
        //div(id:'footer', 'Page generated by the MarkupBuilderTemplateEngine.')
        mkp.yieldUnescaped "<div id='footer'>Copyright &copy; ${year} The Language Application Grid. All rights reserved.</div>"
    }
}
/**
 * Created by Nathan on 8/1/2014.
 */
