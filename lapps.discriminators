// Closures used to generate URI in the required formats.
vocab = { "http://vocab.lappsgrid.org/$it" }
ns = { vocab("ns/$it") }
media = { ns("media/$it") }
_text = { media("text#$it") }
_xml = { media("xml#$it") }

// Closure for loading text from a file. Instead of a string as the value of the
// description field you can also add a relative path to a file (relative to the
// position of this file).
load = { new File(it).text }


/*
 * Base types.
 */
error {
    uri ns('error')
    description "Used to indicate that the server encountered an error while processing the request.  The payload SHOULD contain an error message."
}
ok {
    uri ns('ok')
    description "Response returned by 'ping' requests."
}
meta {
    uri ns('meta')
    description "LAPPS metadata in JSON-LD."
}
text {
    uri media('text')
    description "UTF-8 text files."
}
xml {
    uri media('xml')
    description "Any format XML file."
}
"string-list" {
    uri ns('string-list')
    description "A JSON array of strings."
}
deprecated {
    uri ns('deprecated')
    description 'Parent type for other deprecated discriminators.'
}
 

/*
 * System requests and responses.
 */
system {
    uri ns('system')
    description 'Parent type for Data objects contains system requests or responses.'
}
login {
    uri ns('system#login')
    description 'Indicates the payload contains a JSON document conforming to the login-schema.json schema.'
}
authorization {
    uri ns('system#authorization')
    description """An authorization response from a protected resource. The payload
        must be a JSON document conforming to the authorization-schema.json schema."""
}
 

/*
 * Text formats
 */
"one-per-line" {
    uri _text('newline-separated')
    description "A list of strings separate by a single newline (0x0D) character."
}
tsv {
    uri _text('tab-separated')
    description "A list of strings separate by a single tab (0x09) character."
}
csv {
    uri _text('comma-separated')
    description "A list of strings separate by a single comma (0x2C) character."
}
"space-separated" {
    uri _text('space-separated')
    description "A list of string separated by one, or more white space characters (0x20) or tabs (0x09)."
}


/*
 * Document types.
 */
gate {
    description "A GATE/XML document."
    uri _xml('gate')
}
uima {
    description "A UIMA CAS object."
    uri _xml('uima-cas')
}
stanford {
    uri _text('stanford')
    description "Files produced by the Stanford NLP Tools."
}
opennlp {
    uri _text('opennlp')
    description "Files produces by the Apache OpenNLP tools."
}
graf {
    uri _xml('graf-standoff')
    description "GrAF/XML Standoff annotation file."
}
ptb {
    uri _text('ptb')
    description "Penn TreeBank Lisp-like format."
}
json {
    uri media('json')
    description "Javascript Object Notation."
}
'json-ld' {
    uri media('jsonld')
    description "JSON for Linked Data."
}
lapps {
    uri media('jsonld#lapps')
    description "LAPPS data structure with discriminator, parameters and payload attributes."
}
lif {
    uri media('jsonld#lif')
    description "LAPPS Interchange format (LIF)."
}
ldc {
    uri _xml('ldc')
    description "XML format returned by LDC data sources."
}
tcf {
    uri _xml('tcf')
    description "Text Corpus Format used by Weblicht services. See <link>https://weblicht.sfs.uni-tuebingen.de/weblichtwiki/index.php/The_TCF_Format</link>"
}
ud {
	uri media('ud')
	description "Universal Dependencies. See <link>http://universaldependencies.org</link>"
}

/*
 * Annotation types.
 */

include 'target/vocabulary.config'

chunk {
	uri vocab('Chunk')
	description "Any type of annotations that segments the primary data into chunks."
}
lookup {
	uri vocab('Lookup')
	description "Dictionary based annotations. Used in GATE."
}
matches {
	uri vocab('Matches')
	description "Definition needed."
}

/*
 * Part-of-Speech Tag sets.
 * ------------------------
 */

'tags-pos' {
    uri ns('tagset/pos')
    description 'Part-of-speech tag set.'
}

'tags-pos-brown' {
    uri ns('tagset/pos#brown')
    description 'The Brown part-of-speech tag set.'
}

'tags-pos-hepple' {
	uri ns('tagset/pos#hepple')
	description 'Tagset used by the GATE Hepple POS tagger.'
}

'tags-pos-penntb' {
    uri ns('tagset/pos#penntb')
    description 'The Penn Treebank tag set, see <link>https://catalog.ldc.upenn.edu/docs/LDC99T42/tagguid1.pdf</link> and <link>https://dkpro.github.io/dkpro-core/releases/1.8.0/docs/tagset-reference.html#tagset-en-ptb-pos</link>.'
}

'tags-pos-penntb-tt' {
    uri ns('tagset/pos#penntb-tt')
    description 'The Penn Treebank part-of-speech tag set used by the TreeTagger, which has a few more tags, see <link>https://dkpro.github.io/dkpro-core/releases/1.8.0/docs/tagset-reference.html#tagset-en-ptb-tt-pos</link>.'
}


/*
 * Phrase structure categories
 * ---------------------------
 */

'tags-cat' {
    uri ns('tagset/categories')
    description 'Categories used in syntactic (phrase structure) parses.'
}

'tags-cat-penntb' {
   uri ns('tagset/categories#penntb')
   description 'The syntactic categories from the English Penn Treebank. See <link>https://dkpro.github.io/dkpro-core/releases/1.8.0/docs/tagset-reference.html#tagset-en-ptb-constituent</link>'
}


/*
 * Dependency Sets
 * ---------------------------
 */

'tags-dep' {
    uri ns('tagset/dependencies')
    description 'Tags used by dependency parsers.'
}

'tags-dep-stanford' {
   uri ns('tagset/dependencies#stanford')
   description 'Stanford typed dependencies. See the Stanford dependency sets listed under <link>https://dkpro.github.io/dkpro-core/releases/1.8.0/docs/tagset-reference.html#_dependency</link> and the dependencies manual at <link>https://nlp.stanford.edu/software/dependencies_manual.pdf</link>.'
 }


/*
 * Named Entity Category Sets.
 * ---------------------------
 */

'tags-ner' {
    uri ns('tagset/ner')
    description 'Named entity category sets.'
}

'tags-ner-stanford' {
    uri ns('tagset/ner#stanford')
    description 'Named entity category set used by the Stanford NER, see <link>https://nlp.stanford.edu/software/CRF-NER.shtml</link>. Stanford NER comes with three models, one with three classes (Location, Person, Organization), one with four classes (Location, Person, Organization, Misc) and one with seven (Location, Person, Organization, Money, Percent, Date, Time).'
}

'tags-ner-opennlp' {
    uri ns('tagset/ner#opennlp')
    description 'Named entity category set used by the OpenNLP NER, see <link>https://opennlp.apache.org/docs/1.5.3/manual/opennlp.html#tools.namefind.recognition</link>. Actual tag sets are not defined explicitly and depend on the training models used.'
}

'tags-ner-bio-genetag' {
    uri ns('tagset/ner#bio-opennlp')
    description 'Named entity category set used in the GeneTag data in the MedTag corpus (<linl>ftp://ftp.ncbi.nlm.nih.gov/pub/lsmith/MedTag/</link>.'
}


/*
 * Query types.
 */
query {
    uri ns('action/query')
    description 'The base type for any type of query contained in the payload of a Data object.'
}
get {
    uri ns('action/get')
    description 'Discriminator used to fetch a single artifact from a DataSource.'
}
index {
    uri ns('action/index')
    description 'Used to request that a DataSource return an index of all artifacts it contains.'
}
list  {
    uri ns('action/list')
    description 'Used to request that a DataSource return an index of all artifacts it contains.'
}
lucene {
    uri ns('action/query#lucene')
    description 'Reserved for future use. Indicates that the payload contains a Lucene query.'
}
sql {
    uri ns('action/query#sql')
    description 'Reserved for future use. Indicates that the payload contains an SQL query.'
}
sparql {
    uri ns('action/query#sparql')
    description 'Reserved for future use. Indicates that the payload contains a Sparql query.'
}
regex {
    uri ns('action/query#regex')
    description 'Reserved for future use. Indicates that the payload contains a regular expression to be used as a query.'

}
composite {
    uri ns('action/query#composite')
    description 'Reserved for future use.'
}
size {
    uri ns('action/size')
    description 'Returns the number of artifacts managed by a DataSource.'
}
getMetadata {
    uri ns('action/get-metadata')
    description 'Returns the metadata for the service.'
}
execute {
    uri ns('action/execute')
    description 'Invokes the execute method on a processing service.'
}
solr {
    uri ns('action/query#solr')
    description 'Indicates that the payload contains a SOLR query.'
}
'solr-schema' {
    uri ns('action/query#solr-schema')
    description 'Discriminator used to request that a SOLR data source return its schema.'
}


/* 
 * License types
 */
license {
    uri ns('license')
    description 'Recognized license types.'
}
'public-domain' {
    uri ns("license#public-domain")
    description 'Works released into the public domain. This includes CC0 or other works marked as "No rights reserved."'
}
'open-source' {
    uri ns('license#open-source')
    description 'Any open source license recognized by the Open Source Initiative (<link>http://opensource.org</link>)'
}
apache2 {
    uri ns('license#apache-2.0')
    description 'The Apache 2.0 license. See <link>http://www.apache.org/licenses/LICENSE-2.0.html</link>'
}
gpl {
    uri ns('license#gpl')
    description 'The General Public License by the Free Software Foundation. See <link>http://www.gnu.org/copyleft/gpl.html</link>'
}
lgpl {
    uri ns('license#lgpl')
    description 'The Lesser General Public License by the Free Software Foundation. See <link>http://www.gnu.org/copyleft/lgpl.html</link>'
}
bsd {
    uri ns('license#bsd')
    description 'The original (4 clause) BSD license. It is a free software license, but is not compatible with the GPL.'
}
eclipse {
    uri ns('license#eclipse')
    description 'The Eclipse Public License (EPL) 1.0'
}
'no-commercial' {
    uri ns('license#non-commercial')
    description 'Any license that prohibits commercial use.'
}
restricted {
    uri ns('license#restricted')
    description 'Reserved for future use.'
}
gpl2 {
    uri ns('license#gpl-2.0')
    description 'The General Public License (GPL) Version 2.0'
}
gpl3 {
    uri ns('license#gpl-3.0')
    description 'The General Public License (GPL) Version 3.0'
}
lgpl21 {
    uri ns('license#lgpl-2.1')
    description 'The Lesser General Public License (LGPL) Version 2.1'
}
lgpl3 {
    uri ns('license#lgpl-3.0')
    description 'The Lesser General Public License (LGPL) Version 3.0'
}
bsd2 {
    uri  ns('license#bsd-2-clause')
    description 'Two clause BSD license.'
}
bsd3 {
    uri  ns('license#bsd-3-clause')
    description 'Three clause BSD license.'
}
mit {
    uri ns('license#mit')
    description 'The MIT license.'
}
cc {
    uri ns('license#cc')
    description 'The Creative Commons family of licenses. See <link>https://creativecommons.org/licenses/</link>'
}
cc0 {
    uri ns('license#cc0')
    description 'Creative Commons Zero (CC0) licenses. Essentially a public domain license.'
}
'cc-by' {
    uri ns('license#cc-by')
    description 'Creative Commons Attribution required'
}
'cc-by-sa' {
    uri ns('license#cc-by-sa')
    description 'Creative Commons Attribution ShareAlike'
}
'cc-by-nd' {
    uri ns('license#cc-by-nd')
    description 'Creative Commons Attribution No Derivatives'
}
'cc-by-nc' {
    uri ns('license#cc-by-nc')
    description 'Creative Commons Attribution Non-Commercial'
}
'cc-by-nc-sa' {
    uri ns('license#cc-by-nc-sa')
    description 'Creative Commons Attribution Non-Commercial ShareAlike'
}
'cc-by-nc-nd' {
    uri ns('license#cc-by-nc-nd')
    description 'Creative Commons Attribution Non-Commercial No Derivatives'
}

// Helper function for creating URI
def allow = { ns("allow#$it") }

/*
 * Allowable usages.
 */
usage {
    uri ns('allow')
    description 'Usage restrictions for services.'
}
research {
    uri allow('research')
    description 'The service may be used for research purposes.'
}
commercial {
    uri allow('commercial')
    description 'The service may be used for commercial purposes.'
}
education {
    uri allow('education')
    description 'The service may be used for educational purposes.'
}
'non-profit' {
    uri allow('non-profit')
    description 'The service may be used for non-profit purposes.'
}
personal {
    uri allow('personal')
    description 'The service may be used for personal purposes.'
}
all {
    uri allow('any')
    description 'The service may be used without restriction.'
}


