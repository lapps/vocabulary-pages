/*
 * This template expects three parameters to be passed to it:
 *
 * 1. element : the ElementDelegate for the page being generated.
 * 2. elements: a HashMap used to map element names to their ElementDelegate object.
 * 3. parents: the names all parents of this element.
 * 4. version: the current vocabulary version.
 */
makeLinks = { String text ->
	if (text == null) return text
	return text.replaceAll("<link>(.*?)</link>", "<a href='\$1.html'>\$1</a>")
}

normalizeVersion = { String version -> 
	return version.replace("-SNAPSHOT", "").replaceAll("-RC\\d*", "")
}

getTypeString = { String version, String type ->
	if (type.startsWith('http')) {
		int index = type.lastIndexOf('/')
		String name = type.substring(index + 1)
		//type = normalizeVersion(type)
		return "<a href='$type'>$name</a>"
	}
	if (type.startsWith('Datatype#')) {
		//version = normalizeVersion(version)
		if (release) {
			return "<a href='http://vocab.lappsgrid.org/$type'>$type</a>"
		}
		return "<a href='http://vocab.lappsgrid.org/$version/$type'>$type</a>"
	}
	return type
}

html {
    head {
        title element.name
        link rel:'stylesheet', type:'text/css', href:'css/lappsstyle.css'
    }
    body {
        div(id:'container') {
            div(id:'intro') {
                div(id:'pageHeader') {
                    h1 "LAPPS Web Service Exchange Vocabulary"
                    h2 "version $version"
                }
            }
            div(id:'mainContent') {
                div(id:'sectionbar') {
                    p {
                        a(href:'index.html', 'Home')
                    }
                }
                if (!release) {
					blockquote """This is a development version of the LAPPS Grid Web Service Exchange
						Vocabulary that is made available for comment and review only. The
						annotations defined here should not be used in production and are
						subject to change without notice."""
                }
                p(class:'head') {
                    parents.each { parent ->
                        a(href:"${parent.name}.html", parent.name)
                        span ' > '
                    }
                    span element.name
                }
				if (element.deprecated) {
					h1 'Deprecated'
					p { 
						mkp.yieldUnescaped makeLinks(element.deprecated)
					}					
				}
                br()
                table {
                	/************
                    if (element.deprecated) {
                    	tr {
                    		td { b "DEPRECATED" }
                    		td element.deprecated
                    	}
                    }
                    *************/
                    tr {
                        td(class:'fixed') { b 'Definition' }
                        td {
                        	String text = makeLinks(element.definition)
                        	if (text) {
                        		mkp.yieldUnescaped makeLinks(element.definition)
                        	}
                        }
                    }
                    if (element.sameAs.size() > 0) {
                        tr {
                            td { b "Same as" }
                            td {
                                element.sameAs.collect { a(href:it, it) }.join(", ")
                            }
                        }
                    }
                    if (element.similarTo.size() > 0) {
                        tr {
                            td { b "Similar to" }
                            td {
                                element.similarTo.collect { a(href:it, it) }.join(", ")
                            }
                        }
                    }
                    tr {
                        td { b "URI" }
                        td element.uri
                    }
                }

                //def parent = element.parent
                boolean headline = true
                /* h1 "Metadata" */
                def node = element
                while (node) {
                    if (node.metadata.size() > 0) {
                        if (headline) {
                            // The headline only gets printed if there are metadata attributes defined.
                            h1 "Metadata"
                            headline = false
                        }
                        if (node.name != element.name) {
                            h2 {
                                span "Metadata from "
                                a(href: "${node.name}.html", node.name)
                            }
                        }
                        table(class: 'definition-table') {
                            tr {
                                th class:'fixed', "Features"
                                th class:'fixed', "Type"
                                th "Description"
                            }
                            List names = node.metadata.keySet().asList()
                            names.each { name ->
                                tr {
                                    def property = node.metadata[name]
                                    td name
                                    td { mkp.yieldUnescaped getTypeString(version, property.type) }
                                    td {
                                        mkp.yieldUnescaped makeLinks(property.description)
                                    }
                                }
                            }
                        }
                    }
                    node = elements[node.parent]
                }

                /* h1 "Properties" */
                headline = true
                node = element
                while (node) {
                    if (node.properties.size() > 0) {
//                        String link = "<a href='${element.name}'>${element.name}</a>"
                        if (headline) {
                            h1 'Features'
                            headline = false
                        }
                        if (node.name != element.name) {
                            h2 {
                                span "Features from "
                                a(href:"${node.name}.html", node.name)
                            }
                        }
                        table(class: 'definition-table') {
                            tr {
                                th class:'fixed', "Features"
                                th class:'fixed', "Type"
                                th "Description"
                            }
                            List names = node.properties.keySet().asList()
                            names.each { name ->
                                tr {
                                    def property = node.properties[name]
                                    td name
                                    td { mkp.yieldUnescaped getTypeString(version, property.type) }
                                    td {
	                                    if (property.required) {
                                                mkp.yieldUnescaped "${makeLinks(property.description)} <span class='required'>[Required]</span>"
    	                                }
    	                                else {
    	                                    mkp.yieldUnescaped makeLinks(property.description)
    	                                }
                                    }
                                }
                            }
                        }
                    }
                    node = elements[node.parent]
                }
                br()
                div(class:'index') {
                    span "Back to the "
                    a(href:'index.html', 'index')
                }
				div {
					a(rel:'license', href:'http://creativecommons.org/licenses/by/4.0/') {
						img(alt:"Creative Commons License", style:"border-width:0; vertical-align: middle;", src:"https://i.creativecommons.org/l/by/4.0/88x31.png", '')
					}
					span {
						span "The LAPPS Grid Vocabulary is licensed under the "
						a(rel:"license", href:"http://creativecommons.org/licenses/by/4.0/", 'Creative Commons Attribution 4.0 International License')
						span('.')
					}
					br()
					br()            
				}                
            }
        }
        div(class:'footer') {
            def year = Calendar.getInstance().get(Calendar.YEAR)
            mkp.yieldUnescaped "<p>Copyright &copy ${year} The Language Application Grid. All rights reserved.</p>"
        }
        div(id:'footer', 'Page generated by the MarkupBuilderTemplateEngine.')
    }
}



/**
 * Created by Nathan on 8/1/2014.
 */
