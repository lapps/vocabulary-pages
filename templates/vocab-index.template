/*
 * This template is used to generate the index.html file which contains a
 * tree view of all the annotation types defined in the vocabulary DSL.
 *
 */

VOCAB="lapps-vocabulary"
RDF="${VOCAB}.rdf"
OWL="${VOCAB}.owl"
JSONLD="${VOCAB}.jsonld"
TTL="${VOCAB}.ttl"

printTable = { node ->
    builder.table(class:'h') {
        tr {
            td(class:'tc', colspan:4) {
            	if (node.deprecated) {
            		span(class:'deprecated') {
				if (node.properties) {
					mkp.yieldUnescaped "<a href='${node.name}.html'>${node.name}</a>: <span>${node.properties}</span>"
				}
				else {
					a(href:"${node.name}.html", node.name)
				}
            		}
            	}
            	else {
			if (node.properties) {
				mkp.yieldUnescaped "<a href='${node.name}.html'>${node.name}</a>: <span>${node.properties}</span>"
			}
			else {
				a(href:"${node.name}.html", node.name)
			}
		}
		//if (node.deprecated) {
		//	span ' [deprecated]'
		//}
            }
        }
        if (node.children.size() > 0) {
            node.children.each { child ->
                tr {
                    td(class:'space','')
                    td(class:'bar','')
                    td(class:'space','')
                    td {
                        printTable(child)
                    }
                }
            }
        }
    }
}

// Recursively prints a node and all its children.
printNode = { node ->
    if (node.children.size() == 0) {
    	def style = ''
    	if (node.deprecated) {
    		println "${node.name} is deprecated."
    		style = 'class="deprecated"'
    	}
        builder.li(style) {
            if (node.properties) {
                mkp.yieldUnescaped "<a href='${node.name}.html'>${node.name}</a>: <span class='property'>${node.properties}</span>"
            }
            else {
                a(href:"${node.name}.html", node.name)
            }
            if (node.deprecated) {
            	span ' [deprecated]'
            }
        }
    }
    else {
        list(node.name) {
            node.children.each { printNode it }
        }
    }
}

// The start of the HTML template.
html {
    head {
        title 'LAPPS Type Hierarchy'
        link rel:'stylesheet', type:'text/css', href:'css/lappsstyle.css'
        script(src:'js/jquery-1.11.1.js', type:'text/javascript', language:'javascript', "")
        script (type:'text/javascript', """
            \$(document).ready(function() {
                \$(".collapse").click(function () {
                    \$(this).next().next().toggle();
                    \$(this).children().toggle();
                });
            });
        """)
    }
    body {
        div(id:'container') {
            div(id: 'intro') {
                div(id: 'pageHeader') {
                    h1 "LAPPS Web Service Exchange Vocabulary"
                    h2 "version $version"
                }
            }
        }
        div(id:'mainContent') {
        	blockquote """This is a development version of the LAPPS Grid Web Service Exchange
        	     Vocabulary that is made available for comment and review only. The
        	     annotations defined here should not be used in production and are
        	     subject to change without notice."""
            p """The LAPPS Web Service Exchange Vocabulary defines an ontology of
                 terms for a core of linguistic objects and features exchanged among
                 NLP tools that consume and produce linguistically annotated data.
                 It is intended to be used for module description and input/output
                 interchange to support service discovery, composition, and reuse in
                 the natural language processing domain."""

            p """The Exchange Vocabulary is being developed bottom-up on an as-needed
                 basis for use in the development of the LAPPS Grid. The Type
                 Hierarchy below contains all of the elements for which specifications
                 have been finalized so far. Detailed information is available by
                 clicking on the relevant element. At the bottom of the page are some 
		 instructions for downloading the vocabulary."""

            br()

            h1 "LAPPS Exchange Vocabulary Type Hierarchy"
            //roots.each { root ->
            //    br()
            //    printTable(root)
            //}
            // TDOD The spacing should be done in the CSS not with <br/> tags.
			br()
			printTable(roots[0])
            br()

    	    p """The vocabulary is available in the following formats: """

            ul {
            	li { a(href:RDF, "RDF") }
            	li { a(href:OWL, "OWL") }
            	li { a(href:JSONLD, "JSONLD") }
            	li { a(href:TTL, "TTL") }
            }

            //p "The RDF/XML and JSON-LD versions can also be obtained by specifying the appropriate Accept header in the HTTP request:"
	    //br()
            mkp.yieldUnescaped "The RDF/XML and JSON-LD versions can also be obtained by specifying the appropriate <em>Accept</em> header in the HTTP request:"
            pre 'curl -H "Accept: application/rdf+xml" http://vocab.lappsgrid.org'

	    br()

            div {
		a(rel:'license', href:'http://creativecommons.org/licenses/by/4.0/') {
			img(alt:"Creative Commons License", style:"border-width:0; vertical-align: middle;", src:"https://i.creativecommons.org/l/by/4.0/88x31.png", '')
		}
		span {
			span "The LAPPS Grid Vocabulary is licensed under the "
			a(rel:"license", href:"http://creativecommons.org/licenses/by/4.0/", 'Creative Commons Attribution 4.0 International License')
			span('.')
		}
		br()
		br()            
            }
        }
        div(class:'footer') {
            def year = Calendar.getInstance().get(Calendar.YEAR)
            mkp.yieldUnescaped "<p>Copyright &copy ${year} The Language Application Grid. All rights reserved.</p>"
        }
    }
}
